pipeline {
    agent any
	
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'qa', 'prod'], description: 'Select environment to deploy')
    }

    environment {
        APP_NAME = "my-app"
        IMAGE_TAG = "v${BUILD_NUMBER}"
        PYTHON = "/usr/bin/python3"
        AWS_REGION = "ap-south-1"                  // ‚úÖ change as needed
        ACCOUNT_ID = "132514887880"               // ‚úÖ your AWS Account ID
        ECR_REPO = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APP_NAME}"
        DOCKER_IMAGE = "${ECR_REPO}:${IMAGE_TAG}"
	HELM_CHART = "./helm/myapp"  
    }

    stages {

        stage('Checkout') {
            steps {
                echo "Checking out source code..."
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                echo "Setting up Python virtual environment..."
                sh '''
                    set -e
                    if ! command -v python3 >/dev/null 2>&1; then
                        echo "Installing Python3..."
                        sudo apt-get update -y
                        sudo apt-get install -y python3 python3-pip python3-venv
                    fi

                    rm -rf venv
                    ${PYTHON} -m venv venv
                    . venv/bin/activate

                    pip install --upgrade pip
                    pip install -r app/requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo "Running unit tests..."
                sh '''
                    set -e
                    . venv/bin/activate
                    pytest app/tests/ -v --junitxml=results.xml
                '''
            }
            post {
                always {
                    echo "Archiving test results..."
                    junit allowEmptyResults: true, testResults: 'results.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh '''
                    set -e
                    docker build -t ${DOCKER_IMAGE} .
                    echo "‚úÖ Docker image built successfully!"
                '''
            }
        }

        stage('Scan Docker Image (Trivy)') {
            steps {
                echo "üîç Scanning Docker image with Trivy..."
                sh '''
                    set -e
                    trivy image --severity HIGH,CRITICAL --no-progress ${DOCKER_IMAGE} || true
                '''
            }
        }

        stage('Login to AWS ECR') {
            steps {
                echo "üîë Logging in to AWS ECR..."
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'b860cc13-aa91-451a-8eff-34525ed6f797']]) {
                    sh '''
                        set -e
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        echo "‚úÖ Successfully logged in to ECR!"
                    '''
                }
            }
        }

        stage('Push Docker Image to AWS ECR') {
            steps {
                echo "‚òÅÔ∏è Pushing image to AWS ECR..."
                sh '''
                    set -e
                    docker push ${DOCKER_IMAGE}
                    echo "‚úÖ Image pushed successfully: ${DOCKER_IMAGE}"
                '''
            }
        }

        stage('Create ECR Pull Secret in Minikube') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'b860cc13-aa91-451a-8eff-34525ed6f797']]) {
                    sh '''
                        echo "üîë Creating ECR pull secret in Minikube..."
                        kubectl delete secret ecr-secret -n ${params.ENVIRONMENT} --ignore-not-found

                        ECR_PASSWORD=$(aws ecr get-login-password --region ap-south-1)
                        kubectl create secret docker-registry ecr-secret \
                            --docker-server=132514887880.dkr.ecr.ap-south-1.amazonaws.com \
                            --docker-username=AWS \
                            --docker-password="$ECR_PASSWORD" \
                            -n ${params.ENVIRONMENT} 
                    '''
                }
            }
        }

		stage('Deploy to Minikube using Helm') {
			steps {
				script {
					echo "üöÄ Deploying ${APP_NAME} to ${params.ENVIRONMENT} environment using Helm..."

					sh """
						set -e
						helm upgrade --install ${APP_NAME}-${params.ENVIRONMENT} ${HELM_CHART} \
							-f ${HELM_CHART}/values-${params.ENVIRONMENT}.yaml \
							--set image.repository=${ECR_REPO} \
							--set image.tag=${IMAGE_TAG} \
							--namespace ${params.ENVIRONMENT} \
							--create-namespace
						echo "‚úÖ Helm deployment to ${params.ENVIRONMENT} successful!"
					"""
				}
			}
		}

		stage('Verify Deployment') {
            steps {
                echo "üîç Verifying deployment status..."
                sh """
                  kubectl get pods -n ${params.ENVIRONMENT}
                  kubectl get svc -n ${params.ENVIRONMENT}
                """
            }
        }
    }

    post {
        success {
            echo "‚úÖ Helm deployment to ${params.ENVIRONMENT} successful!"
        }
        failure {
            echo "‚ùå Deployment failed. Check Helm and ECR logs."
        }
    }
}

